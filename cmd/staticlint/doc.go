/*
Package staticlint содержит multichecker для статического анализа Go кода.

# Описание

Multichecker объединяет несколько категорий анализаторов:
- Стандартные анализаторы из golang.org/x/tools/go/analysis/passes
- Все анализаторы класса SA из staticcheck.io
- Дополнительные анализаторы других классов из staticcheck.io
- Собственный анализатор noosexit

# Запуск

Для запуска multichecker используйте команду:

	go run cmd/staticlint/main.go ./...

Для проверки конкретного пакета:

	go run cmd/staticlint/main.go ./pkg/mypackage

Для получения справки:

	go run cmd/staticlint/main.go -help

# Включенные анализаторы

## Стандартные анализаторы (golang.org/x/tools/go/analysis/passes)

- printf: проверяет корректность форматных строк в функциях типа printf
- structtag: проверяет корректность тегов структур
- unreachable: находит недостижимый код
- loopclosure: проверяет замыкания в циклах
- unusedresult: проверяет неиспользуемые результаты вызовов функций

## Анализаторы staticcheck класса SA

Включены все анализаторы класса SA из staticcheck.io, которые проверяют:
- Ошибки в коде (баги, логические ошибки)
- Некорректное использование стандартной библиотеки
- Проблемы с горутинами и каналами
- Ошибки в работе с интерфейсами
- Проблемы с управлением памятью

## Дополнительные анализаторы staticcheck

### Класс ST (стилистические проверки)
- ST1000: проверяет наличие комментариев к пакетам
- ST1003: проверяет соответствие именований Go конвенциям
- ST1016: проверяет именование receiver'ов методов

### Класс S (простые проверки)
- S1000: находит избыточные if statement'ы
- S1002: находит избыточные сравнения
- S1025: находит избыточные вызовы fmt.Sprintf

## Собственный анализатор

### noosexit
Запрещает использование прямого вызова os.Exit в функции main пакета main.

Анализатор проверяет:
- Находится ли код в пакете main
- Есть ли функция main
- Содержит ли функция main прямые вызовы os.Exit

Рекомендуется вместо os.Exit использовать return с соответствующим кодом возврата.
*/
package main
